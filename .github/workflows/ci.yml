on:
  push:
    branches:
      - main
  pull_request:
  # schedule:
  #   - cron: "13 3 * * *"

name: CI

jobs:
  build:
    name: Cargo Build
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    strategy:
      matrix:
        target:
          - "thumbv6m-none-eabi"
          - "thumbv7em-none-eabi"
        mcu:
          - "stm32wl5x_cm0p"
          - "stm32wl5x_cm4"
          - "stm32wle5"
        toolchain:
          - "1.56" # MSRV
          - "beta"
        exclude:
          - mcu: "stm32wl5x_cm0p"
            target: "thumbv7em-none-eabi"
          - mcu: "stm32wl5x_cm4"
            target: "thumbv6m-none-eabi"
          - mcu: "stm32wle5"
            target: "thumbv6m-none-eabi"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          default: true
      - name: Build HAL
        run: |
          cargo build \
          --target ${{ matrix.target }} \
          --features ${{ matrix.mcu }}
      - name: Build NUCLEO BSP
        if: ${{ startsWith(matrix.mxu, 'stm32wl5x') }}
        run: |
          cargo build -p nucleo-wl55jc-bsp \
          --target thumbv7em-none-eabi \
          --features ${{ matrix.mcu }}
      - name: Build LoRa E5 BSP
        if: ${{ startsWith(matrix.mxu, 'stm32wle5') }}
        run: cargo build -p lora-e5-bsp --target thumbv7em-none-eabi

  build_testsuite:
    name: Build Testsuite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          target: thumbv7em-none-eabi
      - run: cargo test -p testsuite --target thumbv7em-none-eabi --bins --no-run
      - name: Upload test binaries
        uses: actions/upload-artifact@v2
        with:
          name: test-bins
          if-no-files-found: error
          retention-days: 1
          path: |
            target/thumbv7em-none-eabi/debug/deps/*
            !target/thumbv7em-none-eabi/debug/deps/*.cargo-lock
            !target/thumbv7em-none-eabi/debug/deps/*.d
            !target/thumbv7em-none-eabi/debug/deps/*.meta
            !target/thumbv7em-none-eabi/debug/deps/*.rlib
            !target/thumbv7em-none-eabi/debug/deps/*.rmeta
            !target/thumbv7em-none-eabi/debug/deps/.fingerprint/**/*
            !target/thumbv7em-none-eabi/debug/deps/build/**/*
            !target/thumbv7em-none-eabi/debug/deps/deps/**/*
            !target/thumbv7em-none-eabi/debug/deps/examples/**/*
            !target/thumbv7em-none-eabi/debug/deps/incremental/**/*

  testsuite:
    name: Run Testsuite
    runs-on: self-hosted
    needs:
      - build_testsuite
    steps:
      - name: Display probe-run version
        run: probe-run --version
      - name: List probes
        run: probe-run --list-probes
      - uses: actions/download-artifact@v2
        with:
          name: test-bins
          path: bins
      - name: Run on-target tests
        run: |
          count=0
          for binpath in bins/*; do
          if [[ "$binpath" != bins/subghz* ]]; then
              # alternate probes to wear out flash evenly
              if (( count % 2 )); then
                  probe="002900205553500A20393256"
              else
                  probe="0034001A5553500B20393256"
              fi

              echo "Running $binpath on $probe"
              probe-run --chip STM32WLE5JCIx --connect-under-reset "$binpath" --probe "$probe"
              echo "Done $binpath"
              ((count=count+1))
          fi
          done 

          echo "Spawning subghz job 1"
          probe-run --chip STM32WLE5JCIx --connect-under-reset $(find bins -name 'subghz*') --probe 002900205553500A20393256 &
          echo "Spawning subghz job 2"
          probe-run --chip STM32WLE5JCIx --connect-under-reset $(find bins -name 'subghz*') --probe 0034001A5553500B20393256 &
          echo "Waiting for subghz job completion"

          wait
          echo "Done subghz"

  test_nucleo_bsp:
    name: Test NUCLEO BSP
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          target: thumbv7em-none-eabi
      - name: "Test"
        run: |
          cargo test -p nucleo-wl55jc-bsp \
          --target x86_64-unknown-linux-gnu \
          --features stm32wl5x_cm4

  test_lora_e5_bsp:
    name: Test LoRa E5 BSP
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          target: thumbv7em-none-eabi
      - name: "Test"
        run: cargo test -p lora-e5-bsp --target x86_64-unknown-linux-gnu

  build_examples:
    name: Build Examples
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          target: thumbv7em-none-eabi
      - run: |
          cargo build --examples -p examples --target thumbv7em-none-eabi

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    strategy:
      matrix:
        feature:
          - "stm32wl5x_cm0p"
          - "stm32wl5x_cm4"
          - "stm32wle5"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
      - run: cargo test --features ${{ matrix.feature }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          components: clippy
      # not using clippy-check due to this issue:
      # https://github.com/actions-rs/clippy-check/issues/2
      - run: cargo clippy --features stm32wl5x_cm4 -- --deny warnings

  format:
    name: Rust Format
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: nightly
          components: rustfmt
      - run: cargo +nightly fmt -- --check

  doc:
    name: doc
    runs-on: ubuntu-latest
    env: {"RUSTDOCFLAGS": "-D warnings"}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
      # not run in parallel to avoid hitting concurrency limit
      # stm32wl5x_cm4 covered by rustdoc
      - run: cargo doc --features stm32wl5x_cm0p
      - run: cargo doc --features stm32wle5

  rustdoc:
    name: rustdoc
    runs-on: ubuntu-latest
    env: {"RUSTDOCFLAGS": "-D warnings --cfg docsrs"}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - name: rustdoc
        run: |
          cd hal
          cargo +nightly rustdoc \
          --features rt,stm32wl5x_cm4 \
          -- -Z unstable-options --enable-index-page
      - name: deploy
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true

  release:
    name: crates.io release
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
      - build_examples
      - test_nucleo_bsp
      - test_lora_e5_bsp
      - build_testsuite
      - clippy
      - doc
      - format
      - rustdoc
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
      - name: Release stm32wlxx-hal
        run: |
          cd hal
          cargo publish --token ${CRATES_IO_TOKEN}
          cd ..
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      - name: Release nucleo-wl55jc-bsp
        run: |
          cd nucleo-wl55jc-bsp
          cargo publish --token ${CRATES_IO_TOKEN}
          cd ..
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      - name: Release lora-e5-bsp
        run: |
          cd lora-e5-bsp
          cargo publish --token ${CRATES_IO_TOKEN}
          cd ..
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
