on:
  push:
    branches:
      - main
  pull_request:
  # schedule:
  #   - cron: "13 3 * * *"

name: CI

jobs:
  build:
    name: Cargo Build
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    strategy:
      matrix:
        target:
          - "x86_64-unknown-linux-gnu"
          - "thumbv6m-none-eabi"
          - "thumbv7em-none-eabi"
        mcu:
          - "stm32wl5x_cm0p"
          - "stm32wl5x_cm4"
          - "stm32wle5"
        aio: ["aio", ""]
        exclude:
          - mcu: "stm32wl5x_cm0p"
            target: "thumbv7em-none-eabi"
          - mcu: "stm32wl5x_cm4"
            target: "thumbv6m-none-eabi"
          - mcu: "stm32wle5"
            target: "thumbv6m-none-eabi"
    steps:
      - uses: actions/checkout@v2.3.4
      - if: ${{ matrix.aio == 'aio' }}
        name: setup rust nightly
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
      - if: ${{ matrix.aio != 'aio' }}
        name: setup rust stable
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      - run: |
          cargo build \
          --target ${{ matrix.target }} \
          --features ${{ matrix.mcu }},${{ matrix.aio }}

  build_testsuite:
    name: Testsuite Compile
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    strategy:
      matrix:
        workspace:
          - "aes-testsuite"
          - "pka-testsuite"
          - "rng-testsuite"
          - "subghz-testsuite-rx"
          - "subghz-testsuite-tx"
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          target: thumbv7em-none-eabi
      - name: cargo test
        run: |
          cargo test \
          -p ${{ matrix.workspace }} \
          --target thumbv7em-none-eabi \
          --no-run

  build_testsuite_aio:
    name: Testsuite Compile async
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    strategy:
      matrix:
        workspace:
          - "aes-testsuite"
          - "pka-testsuite"
          - "rng-testsuite"
          - "subghz-testsuite-rx"
          - "subghz-testsuite-tx"
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: nightly
          target: thumbv7em-none-eabi
      - name: cargo test
        run: |
          cargo test \
          -p ${{ matrix.workspace }} \
          --target thumbv7em-none-eabi \
          --features aio \
          --no-run \
          --release

  build_test_bsp:
    name: Build and Test BSP
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          target: thumbv7em-none-eabi
      - name: "Build"
        run: cargo build -p nucleo-wl55jc-bsp --target thumbv7em-none-eabi
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
      - name: "Test"
        run: cargo test -p nucleo-wl55jc-bsp --target x86_64-unknown-linux-gnu

  build_examples:
    name: Examples Compile
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          target: thumbv7em-none-eabi
      - run: |
          cargo build --examples -p examples --target thumbv7em-none-eabi

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    strategy:
      matrix:
        feature:
          - "stm32wl5x_cm0p"
          - "stm32wl5x_cm4"
          - "stm32wle5"
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
      - run: cargo test --features ${{ matrix.feature }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          components: clippy
      - uses: actions-rs/clippy-check@v1.0.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features stm32wl5x_cm4

  format:
    name: Rust Format
    runs-on: ubuntu-latest
    env: {"RUSTFLAGS": "-D warnings"}
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: nightly
          components: rustfmt
      - run: cargo +nightly fmt -- --check

  doc:
    name: doc
    runs-on: ubuntu-latest
    env: {"RUSTDOCFLAGS": "-D warnings"}
    strategy:
      matrix:
        feature:
          - "stm32wl5x_cm0p"
          - "stm32wl5x_cm4"
          - "stm32wle5"
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
      - run: cargo doc --features ${{ matrix.feature }}

  rustdoc:
    name: rustdoc
    runs-on: ubuntu-latest
    env: {"RUSTDOCFLAGS": "-D warnings --cfg docsrs"}
    strategy:
      matrix:
        workspace:
          - "hal"
          - "nucleo-wl55jc-bsp"
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - run: |
          cd ${{ matrix.workspace }}
          cargo +nightly rustdoc --all-features

  release_hal:
    name: crates.io hal release
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
      - build_examples
      - build_test_bsp
      - build_testsuite
      - build_testsuite_aio
      - clippy
      - doc
      - format
      - rustdoc
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
      - run: |
          cd hal
          cargo publish --token ${CRATES_IO_TOKEN}
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  release_bsp:
    name: crates.io bsp release
    needs:
      - release_hal
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
      - run: |
          cd nucleo-wl55jc-bsp
          cargo publish --token ${CRATES_IO_TOKEN}
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
